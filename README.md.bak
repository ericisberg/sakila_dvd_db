# Sakila DVD Rental Database Advanced Queries
## Description
This project involves querying the Sakila DVD Rental database, which contains information about a company that rents movie DVDs, to gain insight into customer behavior, store performance, and payment earnings. The project includes writing advanced SQL queries that use JOINs, aggregations, subqueries, and common table expressions to answer unique questions. The goal of the project is to demonstrate the ability to analyze a relational database and present the findings in a clear and meaningful way.
## Installation

### Step 1. Downloading PostgreSQL
First, you will need to install PostgreSQL on your local machine. Select the following three components during installation - PostgreSQL server, pgAdmin, and command-line tools. pgAdmin is a GUI tool for managing the database. Download the installer from the link below, and install with the admin privileges:

Installing PostgreSQL for Windows:
https://www.postgresql.org/download/windows/

Installing PostgreSQL for Mac OS:
https://www.postgresql.org/download/macosx/

Using the following commands in your terminal you can verify the successful installation of PostgreSQL:

```sh
# Server version:
pg_config --version
# Client version:
psql --version
```
### Step 2. Downloading Sakila database
Once PostgreSQL server is installed, you will need to download the Movie database from this page: https://www.postgresqltutorial.com/postgresql-getting-started/postgresql-sample-database/

Scroll down and click on the orange "Download DVD Rental Sample Database" button.

This will download the zip file, and you will need to extract the dvdrental.tar file.
### Step 3. Connect to the PostgreSQL server
Launch pgAdmin tool, a graphical tool for managing and developing PostgreSQL databases (Part of the initial download), and connect tge pgAdmin to the PostgreSQL server
- Right-click on the Servers → Create → Server... option.
- It will open up a dialog box asking for the PostgreSQL server name, and credentials for the “postgres" superuser
- Provide the following details:

| Tab | Field | Value |
| --- | ----- | ----- |
| General | Name | PostgreSQL |
| Connection | Host name | localhost |
|		| Post | 5432 (default) |
|		| Username | postgres |
|		| Password | As selected during installation |
### Step 4. Loading database
The next step is to load the DVD Rental database into your PostgreSQL server on your machine. Follow the instructions on the page:<br>
https://www.postgresqltutorial.com/postgresql-getting-started/load-postgresql-sample-database/ 

Load the DVD Rental database using the pgAdmin:
- Right click on the Databases and select the Create → Database... menu option
- Create the database with the name dvdrental
- Right click Restore, and restore the data from the locally downloaded Sakila database
- Choose the desired source format and the path of the file/folder containing the tar file
### Step 5. Choose the DVD Rental database and Query
Choose the dvdrental database under Databases (left-navigation pane).
Open the Query tool, write your queries in the Query editor, and run them to see your data output. 

## Questions asked
1.	Which customers have rented the most movies in each country, and how many movies have they each rented?
2.	Which customers have generated the highest total revenue from DVD rentals, and what is their total revenue?
3.	What is the city with the highest average number of rentals per customer?
4.	What is the average rental duration for each distinct film category, and how does it compare to the overall average rental duration for all categories?
## Queries
For queries used to answer the above quetions refer to the SQL_Project_Queries.txt file.
## Explanations
1.	Which customers have rented the most movies in each country, and how many movies have they each rented?
-	The query uses a CTE to create a temporary table customer_country_rentals that lists the number of rentals made by each customer in each country.
-	Then the customer table is joined with the CTE using customer_id as the join key.
-	Next, a subquery is used in the WHERE clause to filter the results and only show the customer(s) with the most rentals in each country.
-	Finally, the results are by country and number of rentals in descending order.

2.	Which customers have generated the highest total revenue from DVD rentals, and what is their total revenue?
-	This query uses a join between the customer and payment tables to retrieve information about each customer's total revenue from DVD rentals. 
-	The query selects the customer_id and first_name and last_name columns from the customer table and concatenates first_name and last_name using the || operator to form the customer_name column. 
-	The SUM aggregation function is used to calculate the total revenue generated by each customer from the amount column in the payment table.
-	The GROUP BY clause is used to group the results by customer_id, so that the SUM aggregation function calculates the total revenue for each customer. Finally, the results are sorted in descending order by total_revenue using the ORDER BY clause.
-	By using a join instead of a subquery, this query may perform better for larger datasets because the join allows the database engine to use its query optimizer to more efficiently retrieve and aggregate the data

3.	What is the city with the highest average number of rentals per customer?
-	A Common Table Expression (CTE) named rentals_per_customer is defined to get the number of rentals for each customer.
-	The rentals_per_customer CTE is then joined with the address table using the customer ID to get the city of each customer.
-	The result is grouped by city and the average number of rentals per customer is calculated using the AVG aggregation function.
-	The result is sorted in descending order by the average number of rentals per customer and limited to the first row to get the city with the highest average.

4.	What is the average rental duration for each distinct film category, and how does it compare to the overall average rental duration for all categories?
-	The code starts with a common table expression (CTE) named category_avg_duration which uses a window function to calculate the average rental duration for each film category and also the overall average rental duration for all categories.
-	The category table is joined with film_category and film tables to get the film categories and their corresponding rental durations.
-	The AVG function with the OVER clause is used to calculate the average rental duration for each category using the PARTITION BY clause to partition the data by category.
-	The AVG function with no arguments and the OVER clause is used to calculate the overall average rental duration for all categories.
-	In the main query, the category_avg_duration CTE is joined with the category table to get the names of the categories, and the result is ordered by the distinct category names.
-	The final result shows the category name, the average rental duration for the category, and the overall average rental duration for all categories.
## Visualizations
Visualizations were created by extracting a CSV file from each query and creating a simple chart in Power BI.
The visualizations can be found in the SQL_Project_Presentation.pdf file.
## Files used
dvdrental.zip<br>
printable-postgresql-sample-database-diagram.pdf<br>
SQL_Project_Presentation.pdf<br>
SQl_Project_Queries.txt<br>
## Date created
Created 4/20/2023
## Credits
Programming for Data Science with Python- Udacity NanoDegree Program<br>
https://www.udacity.com/course/programming-for-data-science-nanodegree--nd104<br>
PostgreSQL.org<br>
https://www.postgresql.org/download/windows/<br>
https://www.postgresql.org/download/macosx/<br>
PostgreSQLtutorial.com<br>
https://www.postgresqltutorial.com/postgresql-getting-started/postgresql-sample-database/<br>
https://www.postgresqltutorial.com/postgresql-getting-started/load-postgresql-sample-database/
