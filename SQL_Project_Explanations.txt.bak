1.	Which customers have rented the most movies in each country, and how many movies have they each rented?
•	We first use a CTE to create a temporary table customer_country_rentals that lists the number of rentals made by each customer in each country.
•	We then join the customer table with the CTE using customer_id as the join key.
•	We use a subquery in the WHERE clause to filter the results and only show the customer(s) with the most rentals in each country.
•	Finally, we sort the results by country and number of rentals in descending order.

2.	Which customers have generated the highest total revenue from DVD rentals, and what is their total revenue?
•	This query uses a join between the customer and payment tables to retrieve information about each customer's total revenue from DVD rentals. 
•	The query selects the customer_id and first_name and last_name columns from the customer table and concatenates first_name and last_name using the || operator to form the customer_name column. 
•	The SUM aggregation function is used to calculate the total revenue generated by each customer from the amount column in the payment table.
•	The GROUP BY clause is used to group the results by customer_id, so that the SUM aggregation function calculates the total revenue for each customer. Finally, the results are sorted in descending order by total_revenue using the ORDER BY clause.
•	By using a join instead of a subquery, this query may perform better for larger datasets because the join allows the database engine to use its query optimizer to more efficiently retrieve and aggregate the data

3.	What is the city with the highest average number of rentals per customer?
•	A Common Table Expression (CTE) named rentals_per_customer is defined to get the number of rentals for each customer.
•	The rentals_per_customer CTE is then joined with the address table using the customer ID to get the city of each customer.
•	The result is grouped by city and the average number of rentals per customer is calculated using the AVG aggregation function.
•	The result is sorted in descending order by the average number of rentals per customer and limited to the first row to get the city with the highest average.

4.	What is the average rental duration for each distinct film category, and how does it compare to the overall average rental duration for all categories?
•	The code starts with a common table expression (CTE) named category_avg_duration which uses a window function to calculate the average rental duration for each film category and also the overall average rental duration for all categories.
•	The category table is joined with film_category and film tables to get the film categories and their corresponding rental durations.
•	The AVG function with the OVER clause is used to calculate the average rental duration for each category using the PARTITION BY clause to partition the data by category.
•	The AVG function with no arguments and the OVER clause is used to calculate the overall average rental duration for all categories.
•	In the main query, the category_avg_duration CTE is joined with the category table to get the names of the categories, and the result is ordered by the distinct category names.
•	The final result shows the category name, the average rental duration for the category, and the overall average rental duration for all categories.
